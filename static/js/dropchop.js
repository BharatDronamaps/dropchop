var dropchop=function(e){return e=e||{},e.version="0.1.1",e.init=function(t){t||e.util.error("No options provided in dropchop.init()"),e.options=t,$(t.id).length||e.util.error("Element with options.id does not exist."),e.$elem=$(t.id),e.layers.prepare(),e.map.init(),e.selection.init(),e.layerlist.init("layerlist"),e.dropzone($("body")),e.ops.init(),e.form.init(),location.search.length&&e.util.executeUrlParams()},e.boom=function(){console.log("shakalaka")},e}(dropchop||{}),dropchop=function(e){"use strict";function t(t){t.on("dragover",function(e){e.preventDefault(),e.stopPropagation(),$(this).addClass("dragging")}),t.on("dragleave",function(e){e.preventDefault(),e.stopPropagation(),$(this).removeClass("dragging")}),t.on("drop",function(t){t.preventDefault(),t.stopPropagation(),$(this).removeClass("dragging");var a=t.originalEvent.dataTransfer.files;$(a).each(function(t){e.util.readFile(a[t])})})}return e=e||{},e.dropzone=function(e){t(e)},e}(dropchop||{}),dropchop=function(e){"use strict";return e=e||{},e.form=e.form||{},e.form.init=function(){$(e).on("form:geo",e.form.geo),$(e).on("form:file",e.form.file)},e.form.geo=function(t,a){e.form.create(a,e.ops.geo[a],"geo")},e.form.file=function(t,a){e.form.create(a,e.ops.file[a],"file:"+a)},e.form.create=function(t,a,r){e.form.remove();var o=$("<form>").addClass("dropchop-form dropchop-form-"+r).attr("id","dropchop-form").attr("data",t);$("<h2>").addClass("dropchop-form-title").text(t).appendTo(o),$("<p>").addClass("dropchop-form-description").text(a.description).appendTo(o);a.parameters&&$(a.parameters).each(function(){var t=e.form.createParam(this);t.appendTo(o)});var n=$("<button>").addClass("dropchop-btn dropchop-btn-green dropchop-form-submit").text("Execute").attr("for",t),i=$("<button>").addClass("dropchop-btn dropchop-btn-cancel dropchop-form-cancel").text("Cancel").attr("type","button");i.on("click",function(t){return t.preventDefault(),e.form.remove(),!1}),o.on("submit",function(a){a.preventDefault();var o=[],n=$(this).serializeArray();return $(n).each(function(e){o.push(n[e].value)}),$(e).trigger("operation:"+r,[t,o]),e.form.remove(),!1}),o.append(n),o.append(i),e.$elem.append(o)},e.form.remove=function(){$("#dropchop-form").remove()},e.form.createParam=function(t){var a=$("<div>").addClass("dropchop-form-parameter"),r=$("<label>").text(t.name).addClass("dropchop-form-parameter-label"),o=e.form.inputs[t.type](t);return o.appendTo(r),t.description.length&&$("<p>").addClass("dropchop-form-parameter-description").html(t.description).appendTo(r),a.append(r),a},e.form.inputs={number:function(e){var t=$("<input>").attr("type","number").attr("name",e.name).attr("value",e["default"]);return t},select:function(e){var t=$("<select>").attr("name",e.name);return $(e.options).each(function(a){var r=$("<option>").text(e.options[a]).attr("value",e.options[a]);r.appendTo(t)}),t},text:function(e){var t=$("<input>").attr("type","text").attr("name",e.name).attr("value",e["default"]);return t},checkbox:function(e){var t=$("<input>").attr("type","checkbox").attr("name",e.name).attr("value",e["default"]);return t},"switch":function(t){var a=$("<div>");return $(e.selection.list).each(function(r){var o=$("<label>").addClass("sub-label"),n=$("<input>").attr("type","radio").val("switch-"+e.selection.list[r].stamp).attr("name",t.name);n.appendTo(o),o.append(e.selection.list[r].name),o.appendTo(a)}),a},recursive:function(e){var t=$("<div>"),a=$("<label>").addClass("sub-label"),r=$("<input>").attr("type","radio").val("true").attr("name",e.name);r.appendTo(a),a.append("Individual features");var o=$("<label>").addClass("sub-label"),n=$("<input>").attr("type","radio").val("false").attr("name",e.name);return n.appendTo(o),o.append("Entire collection"),a.appendTo(t),o.appendTo(t),t}},e}(dropchop||{}),dropchop=function(e){"use strict";function t(e){var t;switch(e){case"FeatureCollection":t="featurecollection";break;case"Feature<Point>":case"Feature<MultiPoint>":t="point";break;case"Feature<LineString>":case"Feature<MultiLineString>":t="line";break;case"Feature<Polygon>":case"Feature<MultiPolygon>":t="polygon";break;case"Feature<GeometryCollection>":t="geom";break;default:t="default"}return t}return e=e||{},e.layerlist={},e.layerlist.elems={},e.layerlist.init=function(t){e.layerlist.$elem=$("<ol>").addClass(t),e.$elem.append(e.layerlist.$elem),e.layerlist.$elem.on("click",function(a){$(a.target).hasClass(t)&&e.selection.clear()});var a=$("<li>").addClass("layer-help").html('Welcome to <strong>dropchop</strong>! Here you can drag and drop files and they will show up in the layer list below.<br><br>To the left you can upload and save your files or <a href="/?gist=09129c20ec020b83bf85">add example data</a> or the <a href="/?gist=d066b572e8a8ad2b6d16">US States</a>.<br><br>To the right you\'ll notice some geospatial operations that become available based on selecting specific layers.');e.layerlist.$elem.append(a);var r=$("<li>").addClass("layer-toggleAll").html('<label><input type="checkbox" checked>Toggle all layers</label>');r.on("change",e.layerlist.toggleAll),e.layerlist.$elem.append(r),$(e).on("layer:added",e.layerlist.addLayerListItem),$(e).on("layer:removed",e.layerlist.removeLayerListItem),$(e).on("layer:renamed",e.layerlist.rename)},e.layerlist.rename=function(e,t,a){$("[data-stamp="+t+"]").find(".layer-name").text(a)},e.layerlist.addLayerListItem=function(a,r){var o=$("<li>").addClass("layer-element").attr("data-stamp",r.stamp),n=$("<div>").addClass("layer-name layer-new").text(r.name).delay(3e3).queue(function(e){$(this).removeClass("layer-new")}),i=$("<span>").addClass("layer-type-image sprite sprite-layer-"+t(r.type)),l=$("<input>").addClass("layer-toggle").prop({type:"checkbox",checked:!0}),s=$("<button>").addClass("layer-action layer-remove").html('<i class="fa fa-times"></i>'),p=$("<button>").addClass("layer-action layer-duplicate").html('<i class="fa fa-files-o"></i>');p.on("click",function(t){return t.preventDefault(),$(e).trigger("layer:duplicate",[$(this).parent().attr("data-stamp")]),!1}),s.on("click",function(t){return t.preventDefault(),$(e).trigger("layer:remove",[$(this).parent().attr("data-stamp")]),e.util.updateSearch(),e.selection.clear(),!1}),l.on("change",function(t){this.checked?$(e).trigger("layer:show",[r]):$(e).trigger("layer:hide",[r])}),n.on("click",function(t){if(t.shiftKey){var a,o,n=$(this),i=e.layerlist._lastSelected;$(".layer-element").each(function(e){var t=$(this).attr("data-stamp"),r=n.parent().attr("data-stamp"),l=i.parent().attr("data-stamp");t===r&&(a=e),t===l&&(o=e)}),a>o?$(".layer-element").each(function(t){t>=o&&a>=t&&e.layerlist.selectLayer($(this).find(".layer-name"),e.layers.list[$(this).attr("data-stamp")])}):$(".layer-element").each(function(t){o>t&&t>=a&&e.layerlist.selectLayer($(this).find(".layer-name"),e.layers.list[$(this).attr("data-stamp")])})}else t.metaKey?e.layerlist.selectToggle($(this),r):(e.layerlist.clearSelection($(this),r),e.layerlist.selectToggle($(this),r))}),n.on("dblclick",function(t){e.ops.file.extent.execute()}),o.append(n),o.append(l),o.append(i),o.append(s),o.append(p),e.layerlist.$elem.append(o),e.layerlist.elems[r.stamp]=o,$(".layer-help").hide(),$(".layer-toggleAll").show()},e.layerlist.selectLayer=function(t,a){t.hasClass("selected")||(t.addClass("selected"),$(e).trigger("layer:selected",[a]))},e.layerlist.selectToggle=function(t,a){t.hasClass("selected")?(t.removeClass("selected"),$(e).trigger("layer:unselected",[a])):(t.addClass("selected"),$(e).trigger("layer:selected",[a])),e.layerlist._lastSelected=t},e.layerlist.clearSelection=function(t,a){e.selection.clear()},e.layerlist.toggleAll=function(t){function a(e,t){$(".layer-element[data-stamp="+e+"]").find(".layer-toggle").prop("checked",t).trigger("change")}if($(this).find("input").prop("checked"))for(var r in e.layers.list)a(e.layers.list[r].stamp,!0);else for(var o in e.layers.list)a(e.layers.list[o].stamp,!1)},e.layerlist.removeLayerListItem=function(t,a){$("[data-stamp="+a+"]").fadeOut(300,function(){$(this).remove(),delete e.layerlist.elems[a],0===$(".layer-element").length&&($(".layer-help").show(),$(".layer-toggleAll").hide())})},e}(dropchop||{}),dropchop=function(e){"use strict";function t(e){return"FeatureCollection"===e.type?"FeatureCollection":e.type+"<"+e.geometry.type+">"}return e=e||{},e.layers={},e.layers.list={},e.layers.prepare=function(){$(e).on("file:added",e.layers.add),$(e).on("layer:remove",e.layers.remove),$(e).on("layer:duplicate",e.layers.duplicate),$(e).on("layer:rename",e.layers.rename)},e.layers.add=function(t,a,r,o,n){"Topology"===r.type&&(r=topojson.client.feature(r,r.objects[Object.keys(r.objects)[0]]));var i=e.layers.makeLayer(a,r);e.layers.list[i.stamp]=i,o&&n&&(e.layers.list[i.stamp].ltype=o,e.layers.list[i.stamp].url=n),e.notify("success","<strong>"+i.name+"</strong> has been added!",3500),$(e).trigger("layer:added",[i]),o&&n&&e.util.updateSearch()},e.layers.remove=function(t,a){try{$(e).trigger("layer:removed",[a]),e.notify("info","<strong>"+e.layers.list[a].name+"</strong> has been removed."),delete e.layers.list[a]}catch(r){throw e.notify("error","There was a problem removing the layer."),r}},e.layers.duplicate=function(t,a){var r=e.layers.list[a];e.layers.add({},"copy_"+r.name,r.raw)},e.layers.rename=function(t,a,r){e.layers.list[a.stamp].name=r,$(e).trigger("layer:renamed",[a.stamp,r])},e.layers.makeLayer=function(a,r){var o=r,n=L.mapbox.featureLayer(o),i={name:e.util.removeFileExtension(a),stamp:L.stamp(n),raw:o,type:t(o),featurelayer:n,dateAdded:new Date};return i},e}(dropchop||{}),dropchop=function(e){"use strict";function t(){e.map.token=L.mapbox.accessToken="pk.eyJ1Ijoic3ZtYXR0aGV3cyIsImEiOiJVMUlUR0xrIn0.NweS_AttjswtN5wRuWCSNA",e.map.m=L.mapbox.map("dropchop-map",null,{zoomControl:!1,worldCopyJump:!0}).setView([0,0],3),L.control.zoom({position:"topleft"}).addTo(e.map.m),L.mapbox.geocoderControl("mapbox.places",{position:"topleft"}).addTo(e.map.m);var t={"Mapbox Streets":L.mapbox.tileLayer("mapbox.streets"),"Mapbox Outdoors":L.mapbox.tileLayer("mapbox.outdoors"),"Mapbox Light":L.mapbox.tileLayer("mapbox.light"),"Mapbox Dark":L.mapbox.tileLayer("mapbox.dark"),"Mapbox Satellite":L.mapbox.tileLayer("mapbox.satellite")};t["Mapbox Streets"].addTo(e.map.m),L.control.layers(t,{},{position:"bottomright",collapsed:!1}).addTo(e.map.m),e.map.layergroup=L.mapbox.featureLayer(),e.map.layergroup.addTo(e.map.m),$(e).on("layer:added",e.map.addLayer),$(e).on("layer:hide",e.map.hideLayer),$(e).on("layer:show",e.map.showLayer),$(e.map.m).on("locationfound",function(t){var a=t.originalEvent;e.map.m.fitBounds(a.bounds);var r={type:"Feature",geometry:{type:"Point",coordinates:[a.latlng.lng,a.latlng.lat]},properties:{title:"There You Are","marker-color":"#207178","marker-symbol":"heart"}};$(e).trigger("file:added",["your location",r])}),$(e.map.m).on("locationerror",function(){e.notify("error","There was a problem finding your location.",3e3)})}return e=e||{},e.map={},e.map.init=function(){e.map.$elem=$("<div>").prop("id","dropchop-map").addClass("map"),e.$elem.append(e.map.$elem),$(e).on("layer:removed",e.map.removeLayer),t()},e.map.count=0,e.map.addLayer=function(t,a){var r=a.featurelayer;e.map.layergroup.addLayer(r),r.eachLayer(function(e){var t='<table class="dropchop-table"><tr><th>Property</th><th>Data</th></tr>';if(e.feature.properties)for(var a in e.feature.properties)t+="<tr><td><strong>"+a+"</strong></td><td>"+e.feature.properties[a]+"</td></tr>";else t+="<p>There are no properties set for this feature.</p>";t+="</table>",e.bindPopup(L.popup({maxWidth:450,maxHeight:200,autoPanPadding:[45,45],className:"dropchop-popup"},e).setContent(t))})},e.map.hideLayer=function(t,a){e.map.layergroup.removeLayer(a.featurelayer)},e.map.showLayer=function(t,a){e.map.layergroup.addLayer(a.featurelayer)},e.map.removeLayer=function(t,a){e.map.layergroup.removeLayer(e.layers.list[a].featurelayer)},e}(dropchop||{}),dropchop=function(e){"use strict";return e=e||{},e.notify=function(t,a,r){var o=$("<div>").addClass("notification").addClass(t).html(a);if("close"===r){var n=$("<button>").addClass("notification-close").prop("type","button").html('<i class="fa fa-times"></i>');n.on("click",function(e){$(this).parent().remove()}),$(o).append(n),$(e.$elem).append(o)}else $(e.$elem).append(o),setTimeout(function(){o.remove()},r||3e3)},e}(dropchop||{}),dropchop=function(e){"use strict";function t(t){t.preventDefault();var a=$(this).attr("data-operation");e.ops.geo[a].parameters?$(e).trigger("form:geo",[a]):$(e).trigger("operation:geo",[a,e.selection.list])}function a(t){t.preventDefault();var a=$(this).attr("data-operation");try{e.ops.file[a].execute()}catch(r){throw e.notify("error","This operation doesn't exist!"),r}}function r(){var e=$(".operation-geo").sort(function(e,t){return $(t).data("operation")<$(e).data("operation")?1:-1});e.filter(function(e,t){return $(t).prop("disabled")?void 0:t}).appendTo(".operations-geo"),e.filter(function(e,t){return $(t).prop("disabled")?t:void 0}).appendTo(".operations-geo"),$(".operations-geo").scrollTop(0)}return e=e||{},e.ops=e.ops||{},e.ops.init=function(){function r(t){var r=$("<button>").addClass("menu-action").html(e.ops.file[t].icon||"!").attr("data-operation",t).attr("data-tooltip",e.ops.file[t].description);return"info"===e.ops.file[t].type&&r.addClass("dropchop-info"),r.on("click",a),r}var o=$("<div>").addClass("operations-geo");e.$elem.append(o);for(var n in e.ops.geo){var i=$("<button>").addClass("operation operation-geo operation-inactive").html("<h4>"+n+"</h4><p>"+e.ops.geo[n].description+"</p>").prop("disabled",!0).attr("data-operation",n);i.on("click",t),o.append(i)}$(e).on("layer:selected",e.ops.geoCheck),$(e).on("layer:unselected",e.ops.geoCheck),$(e).on("operation:geo",e.ops.geoExecute),$(e).on("operation:file:load-gist",e.ops.file["load-gist"].get),$(e).on("operation:file:load-url",e.ops.file["load-url"].get),$(e).on("operation:file:load-overpass",e.ops.file["load-overpass"].get),$(e).on("operation:file:rename",e.ops.file.rename.callback),e.ops.setup=[{name:"import",icon:'<i class="fa fa-plus"></i>',actions:["upload","load-url","load-gist","load-overpass","location"]},{name:"Save",icon:'<i class="fa fa-floppy-o"></i>',actions:["save-geojson","save-topojson","save-shapefile"]},{name:"Geo Actions",icon:'<i class="fa fa-wrench"></i>',actions:["extent","expand","combine","rename","remove"]},"info"];for(var l=$("<div>").addClass("dropchop-menu-left"),s=e.ops.setup,p=0;p<s.length;p++){var c=s[p];if("object"!=typeof s[p])if("break"===e.ops.file[c].type){var u=$("<div>").addClass("menu-action-break");l.append(u)}else l.append(r(c));else{var d=$("<div>").addClass("menu-action menu-collapse").html(s[p].icon);"import"===s[p].name&&d.addClass("menu-import");for(var f=$("<div>").addClass("menu-collapse-inner"),m=0;m<s[p].actions.length;m++){var y=e.ops.setup[p].actions[m];f.append(r(y))}d.append(f),l.append(d)}}e.$elem.append(l)},e.ops.geoExecute=function(t,a,r){var o=e.ops.prepareTurfParams(a,r),n=null;try{n=e.ops.geo[a].execute(o.options)}catch(i){throw e.notify("That operation isn't possible. Try changing the order of your selection."),i}$(e).trigger("file:added",[o.name,n])},e.ops.prepareTurfParams=function(t,a){var r={};r.options=[];var o=[],n=[];return $(e.selection.list).each(function(t){-1===$.inArray("switch-"+e.selection.list[t].stamp,a)?o.push(e.selection.list[t].raw):o.unshift(e.selection.list[t].raw),n.push(e.selection.list[t].name)}),r.options=$.merge(o,a),r.name=e.util.concat(n,"_",t),r},e.ops.geoCheck=function(t,a){function o(e){var t=$("[data-operation="+e+"]");t.addClass("operation-inactive"),t.prop("disabled",!0)}function n(e){var t=$("[data-operation="+e+"]");t.removeClass("operation-inactive"),t.prop("disabled",!1)}for(var i in e.ops.geo){var l=e.ops.geo[i];if(e.selection.list.length>l.maxFeatures||e.selection.list.length<l.minFeatures)o(i);else for(var s=0;s<e.selection.list.length;s++){var p=e.selection.list[s];$.inArray(p.type,l.requirements.types)>-1||l.requirements.generalFeature===!0?n(i):o(i)}}r()},e}(dropchop||{}),dropchop=function(e){"use strict";return e=e||{},e.ops=e.ops||{},e.ops.file={upload:{description:"Upload from your computer (.geojson)",icon:'<i class="fa fa-upload"></i>',execute:function(){var t=$("<input>").attr("type","file").attr("multiple","true").css("visibility","hidden").css("position","absolute").css("height","0").on("change",function(){var a=this.files;$(a).each(function(t){e.util.readFile(a[t])}),t.remove()});$("body").append(t),t.click()}},"load-url":{description:"Import file from a URL",icon:'<i class="fa fa-link"></i>',parameters:[{name:"url",description:"URL",type:"text","default":"http://"}],execute:function(){$(e).trigger("form:file",["load-url"])},get:function(t,a,r){var o=r[0];e.util.xhr(o,e.ops.file[a].callback)},callback:function(t,a){if(dropchop.util.loader(!1),200===t.status){var r=JSON.parse(t.responseText),o=t.responseURL.substring(t.responseURL.lastIndexOf("/")+1);$(e).trigger("file:added",[o,r,"url",t.responseURL])}else e.notify("error",t.status+": could not retrieve Gist. Please check your URL")}},"load-gist":{description:"Import files from Gist",icon:'<i class="fa fa-github"></i>',parameters:[{name:"gist",description:"Gist ID or URL",type:"text","default":"https://gist.github.com/"}],execute:function(){$(e).trigger("form:file",["load-gist"])},get:function(t,a,r){var o=r[0].split("/")[r[0].split("/").length-1],n="https://api.github.com/gists/"+o;e.util.xhr(n,e.ops.file[a].callback)},callback:function(t,a){if(dropchop.util.loader(!1),200===t.status){var r=JSON.parse(t.responseText);for(var o in r.files){var n=r.files[o].filename;$(e).trigger("file:added",[n,JSON.parse(r.files[o].content),"gist",t.responseURL.split("/")[t.responseURL.split("/").length-1]])}}else e.notify("error",t.status+": could not retrieve Gist. Please check your URL")}},"load-overpass":{description:"Query the Overpass API",icon:'<i class="fa fa-terminal"></i>',_temp:{},parameters:[{name:"query",description:'Learn more about <a href="http://wiki.openstreetmap.org/wiki/Overpass_API/Language_Guide" target="_blank">the query language</a>.',type:"text","default":"amenity=bar"},{name:"layer name",description:"Name of the layer added if results are found.",type:"text","default":"overpass_layer_name"}],execute:function(){$(e).trigger("form:file",["load-overpass"])},get:function(t,a,r){e.ops.file["load-overpass"]._temp.layerName=r[1];var o=e.util.getBBox();e.util.xhr("http://overpass-api.de/api/interpreter?[out:json];node["+r[0]+"]("+o+");out;",e.ops.file["load-overpass"].callback)},callback:function(t,a){if(dropchop.util.loader(!1),200===t.status){var r=JSON.parse(t.responseText),o=osmtogeojson(r,{flatProperties:!0});r.elements.length?($(e).trigger("file:added",[e.ops.file["load-overpass"]._temp.layerName,o]),e.notify("success","Found <strong>"+r.elements.length+" elements</strong> from the Overpass API")):e.notify("info","No elements found in your query.")}else e.notify("error",t.status+": could not query the Overpass API")}},location:{description:"Add your location as a layer",icon:'<i class="fa fa-crosshairs"></i>',execute:function(){navigator.geolocation?e.map.m.locate():e.notify("error","Geolocation is not available on this browser.",4e3)}},"save-geojson":{minFeatures:1,description:"Save as GeoJSON",icon:'<i class="fa fa-file-code-o"></i>',createsLayer:!1,execute:function(){for(var t=0;t<e.selection.list.length;t++){var a=JSON.stringify(e.selection.list[t].raw),r="dropchop_"+e.selection.list[t].name+".geojson";saveAs(new Blob([a],{type:"text/plain;charset=utf-8"}),r)}}},"save-topojson":{minFeatures:1,description:"Save as TopoJSON",icon:'<i class="fa fa-object-ungroup"></i>',createsLayer:!1,execute:function(){for(var t=0;t<e.selection.list.length;t++){var a=JSON.stringify(topojson.topology({collection:e.selection.list[t].raw},{"property-transform":function(e){return e.properties}})),r="dropchop_"+e.selection.list[t].name+".topojson";saveAs(new Blob([a],{type:"text/plain;charset=utf-8"}),r)}}},"save-shapefile":{minFeatures:1,description:"Save as Shapefile",icon:'<i class="fa fa-file"></i>',execute:function(){$(e.selection.list).each(function(t){try{var a={folder:"dropchop_"+e.selection.list[t].name,types:{point:"dropchop_"+e.selection.list[t].name+"_point",polygon:"dropchop_"+e.selection.list[t].name+"_poly",line:"dropchop_"+e.selection.list[t].name+"_line"}};shpwrite.download(e.selection.list[t].raw,a)}catch(r){throw e.notify("Error","There was a problem downloading the shapefile."+r),r}})},createsLayer:!1},extent:{minFeatures:1,description:"View extent of layers",icon:'<i class="fa fa-globe"></i>',execute:function(){if(e.selection.list.length){var t;$(e.selection.list).each(function(a){var r=e.selection.list[a].featurelayer;a?t.extend(r.getBounds()):t=r.getBounds()}),e.map.m.fitBounds(t)}else e.map.m.fitBounds(e.map.layergroup.getBounds())}},expand:{minFeatures:1,description:"Convert FeatureCollection into separate features",icon:'<i class="fa fa-expand"></i>',execute:function(){var t=0;if(1===e.selection.list.length){var a=e.selection.list[0];if("FeatureCollection"!==a.raw.type){var r=new Error("That needs to be a feature collection!");throw e.notify("error","Layer is not a FeatureCollection."),r}$(a.raw.features).each(function(r){t++,$(e).trigger("file:added",[a.name+t+"_"+a.raw.features[r].geometry.type,a.raw.features[r]])})}else e.notify("info","Please select a single layer!")}},combine:{minFeatures:1,description:"Combines selected features into a single FeatureCollection",icon:'<i class="fa fa-compress"></i>',execute:function(){var t={type:"FeatureCollection",features:[]};e.selection.list.length>0?($(e.selection.list).each(function(a){"FeatureCollection"!==e.selection.list[a].raw.type?t.features.push(e.selection.list[a].raw):e.notify("info",e.selection.list[a].name+" was not added because it is already a FeatureCollection")}),$(e).trigger("file:added",["new_FeatureCollection",t])):e.notify("info","No layers selected!")}},rename:{minFeatures:1,description:"Rename layer",icon:'<i class="fa fa-pencil"></i>',parameters:[{name:"Name",type:"text",description:""}],execute:function(){1===e.selection.list.length?$(e).trigger("form:file",["rename"]):e.notify("info","Please select <strong>one layer</strong>.")},callback:function(t,a,r){$(e).trigger("layer:rename",[e.selection.list[0],r[0]])}},remove:{minFeatures:1,description:"Remove selected layers",icon:'<i class="fa fa-trash-o"></i>',execute:function(){$(e.selection.list).each(function(t){$(e).trigger("layer:remove",[this.stamp])}),e.selection.clear()}},info:{type:"info",description:"Learn more about dropchop",icon:'<i class="fa fa-info"></i>',execute:function(){window.location="/about.html"}}},e}(dropchop||{}),dropchop=function(e){"use strict";return e=e||{},e.ops=e.ops||{},e.ops.geo={along:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!1,types:["Feature<LineString>","FeatureCollection"]},description:"Takes a line and returns a point at a specified distance along the line.",parameters:[{name:"distance",description:"distance along the line",type:"number","default":10},{name:"units",type:"select",description:"",options:["miles","kilometers","radians","degrees"],"default":"miles"}],execute:function(t){var a={};return a="FeatureCollection"===t[0].type?e.util.executeFC(t[0],"along",t):turf.along.apply(null,t)}},bezier:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!1,types:["Feature<LineString>","FeatureCollection"]},description:"Takes a line and returns a curved version by applying a Bezier spline algorithm.",parameters:[{name:"resolution",description:"Time in milliseconds between points",type:"number","default":1e4},{name:"sharpness",description:"a measure of how curvy the path should be between splines",type:"number","default":.85}],execute:function(t){var a={};return a="FeatureCollection"===t[0].type?e.util.executeFC(t[0],"bezier",t):turf.bezier.apply(null,t)}},buffer:{maxFeatures:1,minFeatures:1,requirements:{generalFeature:!0,types:["Feature","FeatureCollection"]},description:"Calculates a buffer for input features for a given radius. Units supported are miles, kilometers, and degrees.",parameters:[{name:"distance",description:"Distance to draw the buffer.",type:"number","default":10},{name:"unit",type:"select",description:"",options:["miles","feet","kilometers","meters","degrees"],"default":"miles"}],execute:function(e){var t=turf.buffer.apply(null,e);return t}},center:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!0,types:["Feature","FeatureCollection"]},description:"Creates a point in the center of the feature.",parameters:[{name:"recursive",description:"Run the operation on each feature in the collection or the entire collection.",type:"recursive"}],execute:function(t){var a={};return a="true"===t[1]?e.util.executeFC(t[0],"center",t):turf.center.apply(null,t)}},centroid:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!0,types:["Feature","FeatureCollection"]},description:"Creates a point in the centroid of the features.",parameters:[{name:"recursive",description:"Run the operation on each feature in the collection or the entire collection.",type:"recursive"}],execute:function(t){var a={};return a="true"===t[1]?e.util.executeFC(t[0],"centroid",t):turf.centroid.apply(null,t)}},destination:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!1,types:["Feature<Point>","FeatureCollection"]},description:"Takes a Point and calculates the location of a destination point given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the Haversine formula to account for global curvature.",parameters:[{name:"distance",description:"distance from the starting point",type:"number","default":10},{name:"bearing",description:"ranging from -180 to 180",type:"number","default":0},{name:"units",type:"select",description:"",options:["miles","kilometers","radians","degrees"],"default":"miles"}],execute:function(t){var a={};return a="FeatureCollection"===t[0].type?e.util.executeFC(t[0],"destination",t):turf.destination.apply(null,t)}},envelope:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!1,types:["FeatureCollection"]},description:"Takes any number of features and returns a rectangular Polygon that encompasses all vertices.",execute:function(e){var t=turf.envelope.apply(null,e);return t}},explode:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!0,types:["Feature","FeatureCollection"]},description:"Takes a feature or set of features and returns all positions as points.",execute:function(e){var t=turf.explode.apply(null,e);return t}},midpoint:{minFeatures:2,maxFeatures:2,requirements:{generalFeature:!1,types:["Feature<Point>"]},description:"Takes two points and returns a point midway between them.",execute:function(e){var t=turf.midpoint.apply(null,e);return t}},simplify:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!1,types:["Feature<LineString>","Feature<Polygon>","FeatureCollection"]},description:"Takes a LineString or Polygon and returns a simplified version. Internally uses simplify-js to perform simplification.",parameters:[{name:"tolerance",description:"simplification tolerance",type:"number","default":.1},{name:"high quality",type:"checkbox",description:"whether or not to spend more time to create a higher-quality simplification with a different algorithm","default":!1}],execute:function(t){var a={};return a="FeatureCollection"===t[0].type?e.util.executeFC(t[0],"simplify",t):turf.simplify.apply(null,t)}},tin:{minFeatures:1,maxFeatures:1,requirements:{generalFeature:!1,types:["FeatureCollection"]},description:"Triangulated irregular network, interpolation method",execute:function(e){var t=turf.tin.apply(null,e);return t}},union:{minFeatures:2,maxFeatures:2,requirements:{generalFeature:!1,types:["Feature<Polygon>"]},description:"Takes two polygons and returns a combined polygon. If the input polygons are not contiguous, this function returns a MultiPolygon feature.",execute:function(e){var t=turf.union.apply(null,e);return t}},within:{minFeatures:2,maxFeatures:2,requirements:{generalFeature:!1,types:["FeatureCollection"]},description:"Takes a set of points and a set of polygons and returns the points that fall within the polygons. First input should be the points.",parameters:[{name:"Points to clip",description:"Select the layer that represents the points you want to clip. This assumes the other layer is your clipping polygon.",type:"switch"}],execute:function(e){var t=turf.within.apply(null,e);return t}}},e}(dropchop||{}),dropchop=function(e){"use strict";function t(t,a){e.selection.remove({},{stamp:a}),e.selection.clear()}return e=e||{},e.selection={},e.selection.list=[],e.selection.init=function(){$(e).on("layer:selected",e.selection.add),$(e).on("layer:unselected",e.selection.remove),$(e).on("layer:removed",t)},e.selection.add=function(t,a){e.selection.list.push(a)},e.selection.remove=function(t,a){var r=null;$(e.selection.list).each(function(t){e.selection.list[t].stamp===a.stamp&&(r=t)}),e.selection.list.splice(r,1)},e.selection.clear=function(){$(".layer-name.selected").removeClass("selected"),$(".operation-geo").addClass("operation-inactive"),$(".operation-geo").prop("disabled",!0),e.selection.list=[]},e}(dropchop||{}),dropchop=function(e){"use strict";return e=e||{},e.util={},e.util.removeFileExtension=function(e){return e=e.replace(/\.[^/.]+$/,"")},e.util.removeWhiteSpace=function(e){return e=e.replace(/^\s+|\s+$/g,""),console.log(e),e},e.util.concat=function(e,t,a){var r="";return $(e).each(function(a){r+=t+e[a]}),r=a+r},e.util.xhr=function(t,a){dropchop.util.loader(!0);var r=new XMLHttpRequest;r.open("GET",t),r.onload=a.bind(this,r),r.onerror=function(a){dropchop.util.loader(!1),console.error(a),e.notify("error","Unable to access "+t,2500)},r.send()},e.util.readFile=function(t){var a=new FileReader;t.name.indexOf(".zip")>-1||t.name.indexOf(".shp")>-1?(a.readAsArrayBuffer(t),e.util.loader(!0),a.onloadend=function(t){shp(a.result)["catch"](function(e){console.log("Problematic projection - ",e)}).then(function(t){return e.util.loader(!1),t?void $(e).trigger("file:added",[t.fileName,t]):e.notify("error","Invalid projection or shapefile.",2500)})}):(a.readAsText(t,"UTF-8"),a.onload=function(){$(e).trigger("file:added",[t.name,JSON.parse(a.result)])})},e.util.jsonFromUrl=function(){var e=location.search.substr(1).split(/(&?gist=|&?url=)/g).filter(function(e){return e.length>0}),t={};return e.forEach(function(a,r){if(0===r||r%2===0){var o=a.replace(/&|=/g,"");t[o]||(t[o]=[]),t[o].push(decodeURIComponent(e[r+1]))}}),t},e.util.updateSearch=function(){var t=[];Object.keys(e.layers.list).forEach(function(a){e.layers.list[a].ltype&&e.layers.list[a].url&&t.indexOf(e.layers.list[a].ltype+"="+e.layers.list[a].url)<0&&t.push(e.layers.list[a].ltype+"="+e.layers.list[a].url)});var a=t.length?"?"+t.join("&"):"/";a!==window.location.search&&window.history.pushState(null,null,a)},e.util.executeUrlParams=function(){var t=e.util.jsonFromUrl();t.gist&&t.gist.length&&$(t.gist).each(function(a){e.ops.file["load-gist"].get({},"load-gist",[t.gist[a]])}),t.url&&t.url.length&&$(t.url).each(function(a){e.ops.file["load-url"].get({},"load-url",[t.url[a]])})},e.util.getFileExtension=function(e){return e.substr(e.lastIndexOf(".")+1)},e.util.getBBox=function(){var t=e.map.m.getBounds(),a=t.getSouthWest(),r=t.getNorthEast();return a.lat+","+a.lng+","+r.lat+","+r.lng},e.util.uncollect=function(e){return e.features[0]},e.util.executeFC=function(t,a,r){var o=r,n={};n.type="FeatureCollection",n.features=[];for(var i=0;i<t.features.length;i++){o[0]=t.features[i];var l;try{l=turf[a].apply(null,o),l.properties=t.features[i].properties||{}}catch(s){e.notify("error",s)}n.features.push(l)}return n},e.util.loader=function(e){var t=$("<div>").addClass("dropchop-loader");e?($("body").addClass("dropchop-loading"),$("body").append(t)):($("body").removeClass("dropchop-loading"),$(".dropchop-loader").addClass("loader-complete").fadeOut(2e3,function(){
$(this).remove()}))},e.util.error=function(e){var t=new Error(e);throw t},e}(dropchop||{});
//# sourceMappingURL=data:application/json;base64,
